#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
int
main(int argc, char *argv[])
{
    // creatin of these stats since stat is a function to help in comparing what file is bigger than the other.
    struct stat stat1, stat2;

   if (argc != 3) {
        // testing out if its equal to 3 that is the two files ur omparing and the program itself that am running
        fprintf(stderr, "Usage: %s <file1> <file2>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

   if (stat(argv[1], &stat1) == -1 || stat(argv[2], &stat2)== -1) {
        perror("stat");
        exit(EXIT_FAILURE);
    }

   printf("File type:                ");
  
  /*if (stat(argv[1], &stat1) == -1 || stat(argv[2], &stat2) == -1) {
        perror("stat");
        return 1; // Error: unable to get file size
    }*/

   switch (stat1.st_mode & S_IFMT) {
    case S_IFBLK:  printf("block device\n");            break;
    case S_IFCHR:  printf("character device\n");        break;
    case S_IFDIR:  printf("directory\n");               break;
    case S_IFIFO:  printf("FIFO/pipe\n");               break;
    case S_IFLNK:  printf("symlink\n");                 break;
    case S_IFREG:  printf("regular file\n");            break;
    case S_IFSOCK: printf("socket\n");                  break;
    default:       printf("unknown?\n");                break;
    }

   

   /*printf("Preferred I/O block size: %ld bytes\n",
            (long) sb.st_blksize);
    printf("File size:                %lld bytes\n",
            (long long) sb.st_size);
         
    printf("Blocks allocated:         %lld\n",
            (long long) sb.st_blocks);

   printf("Last status change:       %s", ctime(&sb.st_ctime));
    printf("Last file access:         %s", ctime(&sb.st_atime));
    printf("Last file modification:   %s", ctime(&sb.st_mtime));*/
    if (stat1.st_size > stat2.st_size){
                printf("%s is bigger than %s", argv[1],argv[2]);  }
         if (stat1.st_size < stat2.st_size){
                printf("%s is smaller than %s", argv[1],argv[2]);  }

        if (stat1.st_size == stat2.st_size){
                printf("%s and %s are the same", argv[1],argv[2]);  }



   exit(EXIT_SUCCESS);
}
/*void getlarge(){
        if (stat1.st_size > stat2.st_size){
                printf("%s is bigger than %s", arg[1],arg[2]);  }
         if (stat1.st_size < stat2.st_size){
                printf("%s is smaller than %s", arg[1],arg[2]);  }
        else
                printf("%s and %s are the same", arg[1],arg[2]);  

}*/
